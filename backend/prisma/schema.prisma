model Page {
  id          String   @id @default(cuid())
  title       String
  content     String
  workspaceId String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
// Prisma schema for WorkSphere backend
// Add more models as you expand modules

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  firstName     String?
  lastName      String?
  isActive      Boolean   @default(true)
  mfaSecret     String?
  mfaEnabled    Boolean   @default(false)
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  roles         Role[]
  sessions      Session[]
  auditLogs     AuditLog[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Role {
  id          String @id @default(cuid())
  name        String
  permissions String[]
  users       User[]
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Organization {
  id              String    @id @default(cuid())
  name            String
  ownerId         String
  users           User[]
  workspaces      Workspace[]
  teams           Team[]
  billingAccount  BillingAccount?
  logoUrl         String?
  primaryColor    String?
  dataRetentionDays Int @default(365)
}

model Workspace {
  id            String @id @default(cuid())
  name          String
  key           String
  isPrivate     Boolean @default(false)
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  issues        Issue[]
}

model Team {
  id            String @id @default(cuid())
  name          String
  members       Json
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Issue {
  id          String   @id @default(cuid())
  issueId     Int
  title       String
  description String?
  status      String
  type        String
  priority    String?
  assigneeId  String?
  reporterId  String
  sprintId    String?
  epicId      String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  customFields Json?
  comments    Comment[]
  attachments Attachment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Minimal stubs for referenced models
model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model BillingAccount {
  id             String   @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String   @unique
  plan           String
  status         String
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  authorId  String
  issue     Issue?   @relation(fields: [issueId], references: [id])
  issueId   String?
  createdAt DateTime @default(now())
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  filename  String
  issue     Issue?   @relation(fields: [issueId], references: [id])
  issueId   String?
  uploadedAt DateTime @default(now())
}
// ... Add more models for Sprint, Workflow, Integration, Webhook, etc.
