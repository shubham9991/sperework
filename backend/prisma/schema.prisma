generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       Membership[]
  projects    Project[]
  subscription Subscription?
  paymentProviderConfig PaymentProviderConfig?
  teams       Team[]
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberships Membership[]
  resetTokens PasswordResetToken[]
  comments    Comment[]
  teamMemberships TeamMembership[]
}

model Membership {
  id        String   @id @default(cuid())
  role      String
  userId    String
  orgId     String
  user      User       @relation(fields: [userId], references: [id])
  org       Organization @relation(fields: [orgId], references: [id])
  @@unique([userId, orgId])
}

model Team {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  org       Organization @relation(fields: [orgId], references: [id])
  members   TeamMembership[]
  @@unique([orgId, name])
}

model TeamMembership {
  id      String @id @default(cuid())
  teamId  String
  userId  String
  role    String @default("MEMBER")
  team    Team   @relation(fields: [teamId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  @@unique([teamId, userId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  key         String
  orgId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  org         Organization @relation(fields: [orgId], references: [id])
  issues      Issue[]
  pages       Page[]
  sprints     Sprint[]
  attachments Attachment[]
  @@unique([orgId, key])
}

enum IssueType {
  EPIC
  STORY
  TASK
  BUG
  SUBTASK
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Issue {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String   @default("")
  type        IssueType
  status      IssueStatus @default(TODO)
  assigneeId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project @relation(fields: [projectId], references: [id])
  comments    Comment[]
  attachments Attachment[]
}

model Comment {
  id        String   @id @default(cuid())
  issueId   String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  issue     Issue    @relation(fields: [issueId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Page {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  content     String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project @relation(fields: [projectId], references: [id])
}

model Sprint {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  projectId String
  issueId   String?
  fileName  String
  mimeType  String
  url       String
  createdAt DateTime @default(now())
  project   Project @relation(fields: [projectId], references: [id])
  issue     Issue?  @relation(fields: [issueId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

// Billing models

enum PlanInterval {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
}

model Plan {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  priceCents Int
  currency  String
  interval  PlanInterval
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(cuid())
  orgId       String   @unique
  planId      String?
  status      SubscriptionStatus @default(TRIAL)
  trialEndsAt DateTime?
  currentPeriodEnd DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  org         Organization @relation(fields: [orgId], references: [id])
  plan        Plan?        @relation(fields: [planId], references: [id])
  invoices    Invoice[]
}

model Invoice {
  id           String   @id @default(cuid())
  subscriptionId String
  amountCents  Int
  currency     String
  status       String
  periodStart  DateTime
  periodEnd    DateTime
  createdAt    DateTime @default(now())
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model PaymentProviderConfig {
  id        String   @id @default(cuid())
  orgId     String   @unique
  provider  String
  keyId     String?
  keySecret String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  org       Organization @relation(fields: [orgId], references: [id])
}
